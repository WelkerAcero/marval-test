// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id             Int     @id @default(autoincrement())
  documentType   String  @db.VarChar(25)
  documentId     String  @unique @db.VarChar(10)
  name           String  @db.VarChar(50)
  lastname       String? @db.VarChar(50)
  cellphone      String  @unique @db.VarChar(10)
  email          String  @unique
  password       String? @db.VarChar(100)
  remember_token String? @unique @db.VarChar(100)

  Roles   Roles @relation(fields: [role_id], references: [id])
  role_id Int

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)
}

//  RELACIONES DE ROLES Y PERMISOS
model Roles {
  id               Int                @id @default(autoincrement())
  rol_name         String             @unique @db.VarChar(30)
  Users            Users[]
  RolesPermissions RolesPermissions[]

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)
}

model Permissions {
  id               Int                @id @default(autoincrement())
  type             String             @unique @db.VarChar(40)
  RolesPermissions RolesPermissions[]
}

//m:m Campo creado para recibir Permissions y Roles => Muchos a muchos
model RolesPermissions {
  id Int @id @default(autoincrement())

  Roles   Roles @relation(fields: [role_id], references: [id]) // no se ve como campo, solo se registra la relación
  role_id Int

  Permissions   Permissions @relation(fields: [permission_id], references: [id]) // no se ve como campo, solo se registra la relación
  permission_id Int

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)

  @@unique([role_id, permission_id])
}

// FIN

model Providers {
  id            Int            @id @default(autoincrement())
  nit           String         @unique @db.VarChar(12)
  documentId    String         @unique @db.VarChar(10)
  name          String         @db.VarChar(50)
  lastname      String         @db.VarChar(50)
  provider_type ProviderType
  person_type   PersonType
  status        ProviderStatus @default(Pendiente)

  BankAccounts BankAccounts?

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)
}

model Partners {
  id         Int    @id @default(autoincrement())
  documentId String @unique @db.VarChar(10)
  name       String @db.VarChar(50)

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)
}

model BankAccounts {
  id             Int         @id @default(autoincrement())
  bank_name      String      @db.VarChar(50)
  account_type   AccountType
  account_number String      @unique @db.VarChar(11)

  Providers   Providers @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  provider_id Int       @unique

  createdAt DateTime @default(now()) @db.Timestamptz(0)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(0)
}

enum AccountType {
  Ahorros
  Corriente
}

enum ProviderType {
  Nacional
  Internacional
}

enum PersonType {
  Natural
  Juridica
}

enum ProviderStatus {
  Aprobado
  Rechazado
  Pendiente
}
